setwd("C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion")
library('ProjectTemplate')
load.project()
library(packrat)
?packrat
init(project = "C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion/app", options = NULL, enter = TRUE, restart = enter,
infer.dependencies = TRUE)
remove.packages("BH", lib="~/R/win-library/3.4")
remove.packages("psych", lib="~/R/win-library/3.4")
packrat::init(options = list(vcs.ignore.src = TRUE, use.cache = TRUE))
library("shiny", lib.loc="~/R/win-library/3.4")
packrat::init(options = list(vcs.ignore.lib = FALSE, external.packages = c("shiny", "knitr", "ggplot2", "httpuv")))
init(project = "C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion/app", options = NULL, enter = TRUE, restart = enter,
infer.dependencies = FALSE)
library(packrat)
init(project = "C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion/app", options = NULL, enter = TRUE, restart = enter,
infer.dependencies = FALSE)
install.packages("BH")
init(project = "C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion/app", options = NULL, enter = TRUE, restart = enter,
infer.dependencies = FALSE)
init(project = "C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion/app", options = NULL, enter = TRUE, restart = enter,
infer.dependencies = TRUE)
remove.packages("utf8", lib="~/R/win-library/3.4")
init(project = "C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion/app", options = NULL, enter = TRUE, restart = enter,
infer.dependencies = TRUE)
warnings()
install.packages("utf8")
install.packages("utf8")
setwd("C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion")
library('ProjectTemplate')
load.project()
install.packages("tidyverse")
library('ProjectTemplate')
load.project()
library(tidyverse)
install.packages("psych")
load.project()
load.project()
setwd("C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion")
library('ProjectTemplate')
load.project()
plot(DS1$ExpansionRate)
plot(DS1$ExpansionRate)
plot(DS1$ExpansionRate)
library(ggplot2)
plot(DS1$ExpansionRate)
setwd("C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion")
library('ProjectTemplate')
load.project()
plot(DS1$ExpansionRate)
boxplot(DS1$ExpansionRate)
hist(DS1$ExpansionRate,
main="Expansion Rate",
xlab="ExpansionRate",
border="blue",
col="green",
las=1,
prob = TRUE)
lines(density(DS1$ExpansionRate))
print(summary(DS1$ExpansionRate))
DS2 <- subset(DS1, DS1$ExpansionRate < 3.25)
plot(DS2$ExpansionRate)
boxplot(DS2$ExpansionRate)
hist(DS2$ExpansionRate,
main="Expansion Rate",
xlab="ExpansionRate",
border="blue",
col="green",
las=1,
prob = TRUE)
lines(density(DS2$ExpansionRate))
print(summary(DS2$ExpansionRate))
plot(DS2$DocsPerGB)
boxplot(DS2$DocsPerGB)
hist(DS2$DocsPerGB,
main="Document Extraction",
xlab="Document Extraction",
border="green",
col="blue",
las=1,
prob = TRUE)
lines(density(DS2$ExpansionRate))
summary(DS2$DocsPerGB)
DS3 <- subset(DS2, DS2$DocsPerGB < 8000)
plot(DS3$DocsPerGB)
boxplot(DS3$DocsPerGB)
hist(DS3$DocsPerGB,
main="Document Extraction",
xlab="Document Extraction",
border="blue",
col="green",
las=1,
prob = TRUE)
lines(density(DS3$ExpansionRate))
summary(DS3$DocsPerGB)
"Mean"
mean(DS3$ExpansionRate)
"Standard Deviation"
sd(DS3$ExpansionRate)
actual <- c(DS3$ExpansionRate * DS3$GBPreExp)
predicted <- c(mean(DS3$ExpansionRate) * DS3$GBPreExp)
R2 <- 1 - (sum((actual-predicted)^2)/sum((actual-mean(actual))^2))
R2
library(Metrics)
rmse(actual, predicted)
ExpansionEstimate <- cut(DS3$ExpansionRate, breaks = 8, label = FALSE)
DS4 <- cbind(DS3, ExpansionEstimate)
DocsPerGBEstimate <- cut(DS4$DocsPerGB, breaks = 3, label = FALSE)
DS4 <- cbind(DS4, DocsPerGBEstimate)
DS5 <- DS4[c(5, 11, 12, 10, 7)]
View(DS5)
DS5 <- DS4[c(5, 11, 12, 10, 7)]
head(DS5)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate)
model1 <- lm(DS5$ExpansionRate ~ log(DS5$ExpansionEstimate^2) + log(DS5$DocsPerGBEstimate^2) + mean(DS5$GBAvgFileSize))
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate)
model1 <- lm(DS5$ExpansionRate ~ log(DS5$ExpansionEstimate^2) + log(DS5$DocsPerGBEstimate^2))
summary(model)
summary(model1)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate)
model1 <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate^2)
summary(model)
summary(model1)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate)
model1 <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + log(DS5$DocsPerGBEstimate^4))
summary(model)
summary(model1)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate)
model1 <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate^2 + log(DS5$DocsPerGBEstimate^4))
summary(model)
summary(model1)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate)
model1 <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate^2 + log(DS5$DocsPerGBEstimate^4) + .2)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate)
model1 <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate^3 + log(DS5$DocsPerGBEstimate^6))
summary(model)
summary(model1)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate)
model1 <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate^3 + log(DS5$DocsPerGBEstimate^10))
summary(model)
summary(model1)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate)
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate^10)
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + sqrt(DS5$DocsPerGBEstimate^10))
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + sqrt(DS5$DocsPerGBEstimate^4))
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + sqrt(DS5$DocsPerGBEstimate^8))
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + sqrt(DS5$DocsPerGBEstimate^6))
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + sqrt(DS5$DocsPerGBEstimate^7))
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate^3)
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + DS5$DocsPerGBEstimate^10)
summary(model)
model <- lm(DS5$ExpansionRate ~ log(DS5$ExpansionEstimate) + DS5$DocsPerGBEstimate^10)
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + log(DS5$DocsPerGBEstimate3))
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + log(DS5$DocsPerGBEstimate^3))
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + log(DS5$DocsPerGBEstimate^4))
summary(model)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + log(DS5$DocsPerGBEstimate))
summary(model)
setwd("C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion")
library('ProjectTemplate')
load.project()
plot(DS1$ExpansionRate)
boxplot(DS1$ExpansionRate)
hist(DS1$ExpansionRate,
main="Expansion Rate",
xlab="ExpansionRate",
border="blue",
col="green",
las=1,
prob = TRUE)
lines(density(DS1$ExpansionRate))
print(summary(DS1$ExpansionRate))
DS2 <- subset(DS1, DS1$ExpansionRate < 3.25)
plot(DS2$ExpansionRate)
boxplot(DS2$ExpansionRate)
hist(DS2$ExpansionRate,
main="Expansion Rate",
xlab="ExpansionRate",
border="blue",
col="green",
las=1,
prob = TRUE)
lines(density(DS2$ExpansionRate))
print(summary(DS2$ExpansionRate))
plot(DS2$DocsPerGB)
boxplot(DS2$DocsPerGB)
hist(DS2$DocsPerGB,
main="Document Extraction",
xlab="Document Extraction",
border="green",
col="blue",
las=1,
prob = TRUE)
lines(density(DS2$ExpansionRate))
summary(DS2$DocsPerGB)
DS3 <- subset(DS2, DS2$DocsPerGB < 8000)
plot(DS3$DocsPerGB)
boxplot(DS3$DocsPerGB)
hist(DS3$DocsPerGB,
main="Document Extraction",
xlab="Document Extraction",
border="blue",
col="green",
las=1,
prob = TRUE)
lines(density(DS3$ExpansionRate))
summary(DS3$DocsPerGB)
"Mean"
mean(DS3$ExpansionRate)
"Standard Deviation"
sd(DS3$ExpansionRate)
actual <- c(DS3$ExpansionRate * DS3$GBPreExp)
predicted <- c(mean(DS3$ExpansionRate) * DS3$GBPreExp)
R2 <- 1 - (sum((actual-predicted)^2)/sum((actual-mean(actual))^2))
R2
library(Metrics)
rmse(actual, predicted)
ExpansionEstimate <- cut(DS3$ExpansionRate, breaks = 8, label = FALSE)
DS4 <- cbind(DS3, ExpansionEstimate)
DocsPerGBEstimate <- cut(DS4$DocsPerGB, breaks = 3, label = FALSE)
DS4 <- cbind(DS4, DocsPerGBEstimate)
DS5 <- DS4[c(5, 11, 12, 10, 7)]
head(DS5)
model <- lm(DS5$ExpansionRate ~ DS5$ExpansionEstimate + log(DS5$DocsPerGBEstimate))
summary(model)
runApp('app/ShinyApplication.R')
runApp('app/ShinyApplication.R')
library(rsconnect)
rsconnect::setAccountInfo(name='mlongstreth', token='18F80761C5FACA37C2EE4D1EF129F07A', secret='S0oJjxFnobd6R8mr0Vr4oGegfVYPKCajHArTqtC/')
?packrat
??packrat
library(packrat)
packrat::clean()
packrat::init()
setwd("C:/Users/Mike/Documents/UC Berkeley/Data Science/csx415-project/DataExpansion")
library('ProjectTemplate')
load.project()
packrat::clean()
local({
## Helper function to get the path to the library directory for a
## given packrat project.
getPackratLibDir <- function(projDir = NULL) {
path <- file.path("packrat", "lib", R.version$platform, getRversion())
if (!is.null(projDir)) {
## Strip trailing slashes if necessary
projDir <- sub("/+$", "", projDir)
## Only prepend path if different from current working dir
if (!identical(normalizePath(projDir), normalizePath(getwd())))
path <- file.path(projDir, path)
}
path
}
## Ensure that we set the packrat library directory relative to the
## project directory. Normally, this should be the working directory,
## but we also use '.rs.getProjectDirectory()' if necessary (e.g. we're
## rebuilding a project while within a separate directory)
libDir <- if (exists(".rs.getProjectDirectory"))
getPackratLibDir(.rs.getProjectDirectory())
else
getPackratLibDir()
## Unload packrat in case it's loaded -- this ensures packrat _must_ be
## loaded from the private library. Note that `requireNamespace` will
## succeed if the package is already loaded, regardless of lib.loc!
if ("packrat" %in% loadedNamespaces())
try(unloadNamespace("packrat"), silent = TRUE)
if (suppressWarnings(requireNamespace("packrat", quietly = TRUE, lib.loc = libDir))) {
# Check 'print.banner.on.startup' -- when NA and RStudio, don't print
print.banner <- packrat::get_opts("print.banner.on.startup")
if (print.banner == "auto" && is.na(Sys.getenv("RSTUDIO", unset = NA))) {
print.banner <- TRUE
} else {
print.banner <- FALSE
}
return(packrat::on(print.banner = print.banner))
}
## Escape hatch to allow RStudio to handle bootstrapping. This
## enables RStudio to provide print output when automagically
## restoring a project from a bundle on load.
if (!is.na(Sys.getenv("RSTUDIO", unset = NA)) &&
is.na(Sys.getenv("RSTUDIO_PACKRAT_BOOTSTRAP", unset = NA))) {
Sys.setenv("RSTUDIO_PACKRAT_BOOTSTRAP" = "1")
setHook("rstudio.sessionInit", function(...) {
# Ensure that, on sourcing 'packrat/init.R', we are
# within the project root directory
if (exists(".rs.getProjectDirectory")) {
owd <- getwd()
setwd(.rs.getProjectDirectory())
on.exit(setwd(owd), add = TRUE)
}
source("packrat/init.R")
})
return(invisible(NULL))
}
## Bootstrapping -- only performed in interactive contexts,
## or when explicitly asked for on the command line
if (interactive() || "--bootstrap-packrat" %in% commandArgs(TRUE)) {
needsRestore <- "--bootstrap-packrat" %in% commandArgs(TRUE)
message("Packrat is not installed in the local library -- ",
"attempting to bootstrap an installation...")
## We need utils for the following to succeed -- there are calls to functions
## in 'restore' that are contained within utils. utils gets loaded at the
## end of start-up anyhow, so this should be fine
library("utils", character.only = TRUE)
## Install packrat into local project library
packratSrcPath <- list.files(full.names = TRUE,
file.path("packrat", "src", "packrat")
)
## No packrat tarballs available locally -- try some other means of installation
if (!length(packratSrcPath)) {
message("> No source tarball of packrat available locally")
## There are no packrat sources available -- try using a version of
## packrat installed in the user library to bootstrap
if (requireNamespace("packrat", quietly = TRUE) && packageVersion("packrat") >= "0.2.0.99") {
message("> Using user-library packrat (",
packageVersion("packrat"),
") to bootstrap this project")
}
## Couldn't find a user-local packrat -- try finding and using devtools
## to install
else if (requireNamespace("devtools", quietly = TRUE)) {
message("> Attempting to use devtools::install_github to install ",
"a temporary version of packrat")
library(stats) ## for setNames
devtools::install_github("rstudio/packrat")
}
## Try downloading packrat from CRAN if available
else if ("packrat" %in% rownames(available.packages())) {
message("> Installing packrat from CRAN")
install.packages("packrat")
}
## Fail -- couldn't find an appropriate means of installing packrat
else {
stop("Could not automatically bootstrap packrat -- try running ",
"\"'install.packages('devtools'); devtools::install_github('rstudio/packrat')\"",
"and restarting R to bootstrap packrat.")
}
# Restore the project, unload the temporary packrat, and load the private packrat
if (needsRestore)
packrat::restore(prompt = FALSE, restart = TRUE)
## This code path only reached if we didn't restart earlier
unloadNamespace("packrat")
requireNamespace("packrat", lib.loc = libDir, quietly = TRUE)
return(packrat::on())
}
## Multiple packrat tarballs available locally -- try to choose one
## TODO: read lock file and infer most appropriate from there; low priority because
## after bootstrapping packrat a restore should do the right thing
if (length(packratSrcPath) > 1) {
warning("Multiple versions of packrat available in the source directory;",
"using packrat source:\n- ", shQuote(packratSrcPath))
packratSrcPath <- packratSrcPath[[1]]
}
lib <- file.path("packrat", "lib", R.version$platform, getRversion())
if (!file.exists(lib)) {
dir.create(lib, recursive = TRUE)
}
message("> Installing packrat into project private library:")
message("- ", shQuote(lib))
surround <- function(x, with) {
if (!length(x)) return(character())
paste0(with, x, with)
}
## Invoke install.packages() in clean R session
peq <- function(x, y) paste(x, y, sep = " = ")
installArgs <- c(
peq("pkgs", surround(packratSrcPath, with = "'")),
peq("lib", surround(lib, with = "'")),
peq("repos", "NULL"),
peq("type", surround("source", with = "'"))
)
fmt <- "utils::install.packages(%s)"
installCmd <- sprintf(fmt, paste(installArgs, collapse = ", "))
## Write script to file (avoid issues with command line quoting
## on R 3.4.3)
installFile <- tempfile("packrat-bootstrap", fileext = ".R")
writeLines(installCmd, con = installFile)
on.exit(unlink(installFile), add = TRUE)
fullCmd <- paste(
surround(file.path(R.home("bin"), "R"), with = "\""),
"--vanilla",
"--slave",
"-f",
surround(installFile, with = "\"")
)
system(fullCmd)
## Tag the installed packrat so we know it's managed by packrat
## TODO: should this be taking information from the lockfile? this is a bit awkward
## because we're taking an un-annotated packrat source tarball and simply assuming it's now
## an 'installed from source' version
## -- InstallAgent -- ##
installAgent <- "InstallAgent: packrat 0.4.9-2"
## -- InstallSource -- ##
installSource <- "InstallSource: source"
packratDescPath <- file.path(lib, "packrat", "DESCRIPTION")
DESCRIPTION <- readLines(packratDescPath)
DESCRIPTION <- c(DESCRIPTION, installAgent, installSource)
cat(DESCRIPTION, file = packratDescPath, sep = "\n")
# Otherwise, continue on as normal
message("> Attaching packrat")
library("packrat", character.only = TRUE, lib.loc = lib)
message("> Restoring library")
if (needsRestore)
packrat::restore(prompt = FALSE, restart = FALSE)
# If the environment allows us to restart, do so with a call to restore
restart <- getOption("restart")
if (!is.null(restart)) {
message("> Packrat bootstrap successfully completed. ",
"Restarting R and entering packrat mode...")
return(restart())
}
# Callers (source-erers) can define this hidden variable to make sure we don't enter packrat mode
# Primarily useful for testing
if (!exists(".__DONT_ENTER_PACKRAT_MODE__.") && interactive()) {
message("> Packrat bootstrap successfully completed. Entering packrat mode...")
packrat::on()
}
Sys.unsetenv("RSTUDIO_PACKRAT_BOOTSTRAP")
}
})
packrat::clean()
packrat::packrat_mode()
packrat::packrat-resources()
remove.packages("utf8", lib="~/R/win-library/3.4")
packrat::init()
packrat::clean()
?packrat
packrat::bundle()
install.packages(c("httpuv", "shiny"))
